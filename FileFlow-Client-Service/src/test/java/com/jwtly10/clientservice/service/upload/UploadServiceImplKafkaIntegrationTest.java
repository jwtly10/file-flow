package com.jwtly10.clientservice.service.upload;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.concurrent.CompletableFuture;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import com.jwtly10.clientservice.service.client.ClientService;
import com.jwtly10.clientservice.service.storage.TempStorageService;

@SpringBootTest
public class UploadServiceImplKafkaIntegrationTest {

    @Autowired
    private UploadServiceImpl uploadService;

    @Value("${file.uploaded.topic}")
    private String fileUploadedTopic;

    @MockBean
    private TempStorageService tempStorageService;

    @MockBean
    private ClientService clientService;

    @MockBean
    private KafkaTemplate<String, String> kafkaTemplate;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testKafkaEventIsPublished() {
        MultipartFile mockFile = new MockMultipartFile(
                "originalFilename",
                "originalFilename.png",
                "image/png",
                new byte[12000]
        );

        // Argument captors to capture values
        ArgumentCaptor<String> topicCaptor = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<String> idCaptor = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<String> messageCaptor = ArgumentCaptor.forClass(String.class);

        // CompletableFuture for simulating a successful send
        CompletableFuture<SendResult<String, String>> completableFuture = new CompletableFuture<>();
        completableFuture.complete(new SendResult<>(null, null));

        when(kafkaTemplate.send(topicCaptor.capture(), idCaptor.capture(), messageCaptor.capture()))
                .thenReturn(CompletableFuture.completedFuture(new SendResult<>(null, null)));

        when(clientService.getUserId("username")).thenReturn("userId");

        String uniqueID = uploadService.uploadFile(mockFile, "username");

        ArgumentCaptor<ProducerRecord<String, String>> producerRecordArgumentCaptor = ArgumentCaptor.forClass(ProducerRecord.class);

        verify(kafkaTemplate).send(producerRecordArgumentCaptor.capture());
        // Verify that the ID generated by the file upload process, is the same as the value used as the key in the Kafka message.
        assertEquals(uniqueID, producerRecordArgumentCaptor.getValue().key());
        // Verify that the topic used is the same as the one configured.
        assertEquals(fileUploadedTopic, producerRecordArgumentCaptor.getValue().topic());
    }
}
